//favor functions
// favor functions use all the previous functions to give a "favor score" 
// to a plateau, depending on the good or bad disposition of the numbers,
//these functions return a postiive or negative number (for later statistical
// optimization)

//tested manually
// int calc_empty_favor(Plateau pavant,Plateau papres){
// 	int nul_avant = count_plateau(pavant,0);
// 	int nul_apres = count_plateau(papres,0);
// 	if(nul_apres>=nul_avant){
// 		return 256 + (nul_apres-nul_avant)*32;
// 	}
// 	return 0;
// }



//tested manually
// int placement_favor(Plateau p, vector<int> coordinates){
// 	int i=coordinates[0];
// 	int j=coordinates[1];
// 	if((i==0 || i==3) && (j==0 || j==3)){
// 		return 32*log2(p[i][j])*log2(p[i][j]);
// 	}
// 	else if((i==0 || i==3) || (j==0 || j==3)){
// 		return 2*log2(p[i][j])*log2(p[i][j]);
// 	}
// 	else{
// 		return 0;
// 	}
// }
//tested manually
// int maximum_value_increase_favor(Plateau pavant, Plateau papres){
// 	int maxv_avant = get<0>(max_plateau(pavant));
// 	int maxv_apres = get<0>(max_plateau(papres));
// 	if(maxv_avant<maxv_apres){
// 		return 512;
// 	}
// 	return 0;
// }
//tested manually
// int num_maximum_value_increase_favor(Plateau pavant, Plateau papres){
// 	int num_maxv_avant = get<1>(max_plateau(pavant));
// 	int num_maxv_apres = get<1>(max_plateau(papres));
// 	if(num_maxv_apres>num_maxv_avant){
// 		if(placement_favor(,))
// 		return 512;
// 	}
// 	return 0;
// }
//tested manually
// int maximum_values_placement_favor(Plateau pavant, Plateau papres){
// 	int favor=0;
// 	vector<vector<int>> maxv_avant_coordinates = get<2>(max_plateau(pavant));
// 	vector<vector<int>> maxv_apres_coordinates = get<2>(max_plateau(papres));
// 	int sum_avant;
// 	int sum_apres;
// 	vector<int> favors_avant = vector<int>(maxv_avant_coordinates.size());
// 	vector<int> favors_apres = vector<int>(maxv_apres_coordinates.size());
// 	int i = 0;
// 	for(vector<int> coordinate_pair:maxv_avant_coordinates){
// 		favors_avant[i] = placement_favor(coordinate_pair);
// 		i++;
// 	}
// 	i=0;
// 	sum_avant = sum_tableau(favors_avant);
// 	for(vector<int> coordinate_pair:maxv_apres_coordinates){
// 		favors_apres[i] = placement_favor(coordinate_pair);
// 		i++;
// 	}
// 	sum_apres = sum_tableau(favors_apres);
// 	if(sum_avant>sum_apres){
// 		return 0;
// 	}else if(sum_avant<sum_apres){
// 		return sum_apres-sum_avant;
// 	}else{
// 		return 0;
// 	}
// }
// int repartition_favor(Plateau pavant, Plateau papres){
// 	int avant_sumextern = sum_tableau(pavant[0])+sum_tableau(pavant[3])
// 					+pavant[1][0]+pavant[1][3]+pavant[2][0]+pavant[2][3];
// 	int apres_sumextern = sum_tableau(papres[0])+sum_tableau(papres[3])
// 					+papres[1][0]+papres[1][3]+papres[2][0]+papres[2][3];
// 	int sum_pavant = sum_plateau(pavant);
// 	int sum_papres = sum_plateau(papres);
// 	int avant_sumintern = sum_pavant-avant_sumextern;
// 	int apres_sumintern = sum_papres-apres_sumextern;
// 	int favor=0;
// 	if(apres_sumintern<avant_sumintern){
// 		return avant_sumintern-apres_sumintern;
// 	}
// 	return 0;
// }



// int vals_favor(Plateau pavant, Plateau papres){
// 	int favor_apres=0;
// 	int favor_avant=0;
// 	for(int row=0; row<4; row++){
// 		for(int column=0; column<4; column++){
// 			favor_avant+=placement_favor(pavant, {row, column});//*log2(p[row][column])
// 			favor_apres+=placement_favor(papres, {row, column});
// 		}
// 	}
// 	if(favor_apres<favor_avant){
// 		return 0;
// 	}
// 	return 526;
// }
// int max_vals_favors(Plateau pavant, Plateau papres){
// 	int favor=0;
// 	int maxv_avant = get<0>(max_plateau(pavant));
// 	int maxv_apres = get<0>(max_plateau(papres));
// 	int num_maxv_avant = get<1>(max_plateau(pavant));
// 	int num_maxv_apres = get<1>(max_plateau(papres));
// 	vector<vector<int>> maxv_avant_coordinates = get<2>(max_plateau(pavant));
// 	vector<vector<int>> maxv_apres_coordinates = get<2>(max_plateau(papres));
// 	if(num_maxv_apres==1){
// 		favor+=maxv_apres;
// 		favor+=placement_favor(papres, maxv_apres_coordinates[0]);
// 	}else{
// 		int sum_avant;
// 		int sum_apres;
// 		vector<int> favors_avant = vector<int>(num_maxv_avant);
// 		vector<int> favors_apres = vector<int>(num_maxv_apres);
// 		int i = 0;
// 		for(vector<int> coordinate_pair:maxv_avant_coordinates){
// 			favors_avant[i] = placement_favor(pavant, coordinate_pair);
// 			i++;
// 		}
// 		i=0;
// 		sum_avant = sum_tableau(favors_avant);
// 		for(vector<int> coordinate_pair:maxv_apres_coordinates){
// 			favors_apres[i] = placement_favor(papres, coordinate_pair);
// 			i++;
// 		}
// 		sum_apres = sum_tableau(favors_apres);
// 		favor+=256;
// 		cout<<to_string(sum_avant)<<" , "<<to_string(sum_apres)<<endl;
// 		if(sum_apres<sum_avant){
// 			favor-=256;
// 		}else{
// 			favor+=256;
// 		}
// 		return favor;
// 	}
// 	return favor;
// }
//a revoir
// int max_edge_change_favor(Plateau pavant, Plateau papres){
// 	if(get<0>(max_edge(pavant))==get<0>(max_edge(papres))){
// 		return 512;
// 	}
// 	return 0;
// }
// //a revoir
// int max_half_edge_change_favor(Plateau pavant, Plateau papres){
// 	if(get<0>(max_half_edge(pavant))==get<0>(max_half_edge(papres))){
// 		return 512;
// 	}
// 	return 0;
// }




//int placement_favor(Plateau p, vector<int> coordinates);
//int repartition_favor(Plateau pavant, Plateau papres);
//int vals_favor(Plateau pavant, Plateau papres);
//int max_vals_favors(Plateau pavant, Plateau papres);
//int max_edge_change_favor(Plateau pavant, Plateau papres);
//int max_half_edge_change_favor(Plateau pavant, Plateau papres);











helper 



//tested manually
//if you thought max_edge() was monstrous, check this
// tuple<vector<string>, vector<vector<int>>> max_half_edge(Plateau plateau){
// 	vector<vector<int>> half_edges = extract_half_edges(plateau);
// 	vector<int> sums = vector<int>(8);
// 	for(int i=0; i<8; i++){
// 		sums[i]=sum_tableau(half_edges[i]);
// 	}
// 	int vmax = get<0>(max_tableau(sums));
// 	int n_vmax = get<1>(max_tableau(sums));
// 	vector<vector<int>> maximum_half_edges = vector<vector<int>>(n_vmax);
// 	vector<string> descriptions=vector<string>(n_vmax);
// 	vector<string> refs = {"htl","htr","vrt","vrb","hbl","hbr","vlt","vlb"};
// 	int i=0;
// 	int count=0;
// 	for(vector<int> half_edge:half_edges){
// 		if(sum_tableau(half_edge)==vmax){
// 			maximum_half_edges[count] = half_edge;
// 			descriptions[count] = refs[i];
// 			count++;
// 		}
// 		i++;
// 	}
// 	tuple<vector<string>, vector<vector<int>>> tup = make_tuple(descriptions,maximum_half_edges);
// 	return tup;
// }




//{"htl","htr","vrt","vrb","hbl","hbr","vlt","vlb"}
// vector<vector<int>> extract_half_edges(Plateau plateau){
// 	vector<vector<int>> extracted = extract_edges(plateau);
// 	vector<vector<int>> half_edges = vector<vector<int>>(8);
// 	int count=0;
// 	for(vector<int> edge:extracted){
// 		half_edges[count] = {edge[0],edge[1]};
// 		count++;
// 		half_edges[count] = {edge[3],edge[2]};
// 		count++;
// 	}
// 	return half_edges;
// }


//vector<vector<int>> extract_half_edges(Plateau plateau);


//tuple<vector<string>, vector<vector<int>>> max_half_edge(Plateau plateau);
